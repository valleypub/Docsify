先对比一下python与c++代码的运行方式。
pythonpython解释器直接执行python源码，每一个被创建的python对象都包含有该类的属性名、方法名等信息，所以dir方法可以查到。
c++c++编译器把c++源码编译成机器码，它不保留类的属性名、方法名等信息，除非你要求它附带调试符号。
不过dll比较特殊，它可以附带一些导出（export）方法列表，里面包含有方法名称。这可以通过PE工具看到，如DependencyWalker，http://www.dependencywalker.com/
关于调试符号请查阅编译器的相关文档，如
微软vc++的pdb文件，https://github.com/Microsoft/...
GNUg++的-g参数，https://gcc.gnu.org/onlinedoc...
需要深入研究c++类如何转换成机器码的同学，可网上搜索c++virtualfunction。
再来说一下.h头文件与lib/dll库文件的关系。
一般而言，头文件是库开发者给库调用者使用的一种声明文件，调用者的c++编译器根据头文件生成必要的机器码以访问类库的属性或方法。如果头文件丢失了，使用逆向工程（reverseengineering）可以造一个头文件出来。


C或C++程序编译后就会失去程序中的很多信息，包括类名、方法名、字段名等，所以想在运行期间获得这些内容是很难的。这一点与Python等支持反射的语言有很大不同。 至于导出调试信息，只是说在可执行程序中加了一段数据，用来标识可执行文件与源代码的一些映射，从而让调试变得方便。但是调试信息是给调试器用的，程序自身并不能够直接获取这些信息，除非你自己解析二进制格式的可执行文件。 所以回到你的问题上来，虽然很多语言都提供了反射机制，但C/C++这种相对比较“底层”的语言并没有提供。